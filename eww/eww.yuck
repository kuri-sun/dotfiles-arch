;; Tokyo Weather
(defpoll tokyo_temp :interval "30m" "scripts/weather.sh temp tokyo")
(defpoll tokyo_condition :interval "30m" "scripts/weather.sh condition tokyo")
(defpoll tokyo_icon :interval "30m" "scripts/weather.sh icon tokyo")
(defpoll tokyo_humidity :interval "30m" "scripts/weather.sh humidity tokyo")

;; Media Player
(defpoll music_status :interval "1s" "scripts/music.sh status")
(defpoll music_title :interval "1s" "scripts/music.sh title")
(defpoll music_artist :interval "1s" "scripts/music.sh artist")
(defpoll music_cover :interval "1s" "scripts/music.sh cover")

;; System stats
(defpoll cpu_usage :interval "2s" "scripts/system.sh cpu")
(defpoll cpu_percent :interval "2s" "scripts/system.sh cpu_percent")
(defpoll memory_usage :interval "2s" "scripts/system.sh memory")
(defpoll cpu_temp :interval "3s" "scripts/system.sh temp")

;; Storage
(defpoll storage_percent :interval "30s" "scripts/storage.sh percent")

;; Date
(defpoll date_day :interval "10s" "date '+%d'")
(defpoll date_month :interval "10s" "date '+%b' | tr '[:lower:]' '[:upper:]'")
(defpoll date_year :interval "10s" "date '+%Y'")
(defpoll date_weekday :interval "10s" "date '+%A' | tr '[:lower:]' '[:upper:]'")
(defpoll date_time :interval "1s" "date '+%I:%M %p'")

;; Bar modules
(defpoll bar_time :interval "1s" "date '+%B %d  %I:%M %p'")
(defpoll battery_icon :interval "10s" "scripts/battery.sh icon")
(defpoll battery_percent :interval "10s" "scripts/battery.sh percent")
(defpoll battery_status :interval "10s" "scripts/battery.sh status")
(defpoll audio_icon :interval "3s" "scripts/audio.sh icon")
(defpoll audio_volume :interval "3s" "scripts/audio.sh volume")
(defpoll network_icon :interval "5s" "scripts/network-status.sh icon")
(defpoll network_type :interval "5s" "scripts/network-status.sh type")
(defpoll language_status :interval "3s" "~/.config/waybar/scripts/fcitx5-status.sh")

;; Hyprland workspaces - track active workspace
(defpoll active_workspace :interval "500ms" "hyprctl activeworkspace -j | jq -r '.id'")

;; Circular Stat Item (based on storage widget pattern)
(defwidget circular_stat [icon value ?color ?unit]
  (box :class "stat-item" :orientation "v" :space-evenly false :spacing 6
    (box :class "stat-ring" :orientation "v" :valign "center" :halign "center"
      (overlay
        (circular-progress :value 100
                          :class "stat-progress-bg"
                          :thickness 9
                          :start-at 75
                          :clockwise true)
        (circular-progress :value value
                          :class "stat-progress ${color}"
                          :thickness 9
                          :start-at 75
                          :clockwise true)
        (box :class "stat-center" :orientation "v" :valign "center" :halign "center"
          (label :class "stat-icon" :text icon))))
    (label :class "stat-percent" :text "${round(value, 0)}${unit ?: '%'}")))

;; System Stats Widget with Circular Graphs
(defwidget system_stats []
  (box :class "widget system-stats-card" :orientation "v" :space-evenly false :spacing 10
    (box :class "stats-grid" :orientation "h" :space-evenly true :spacing 16
      (circular_stat :icon "󰻠" :value cpu_percent :color "cpu-color")
      (circular_stat :icon "󰍛" :value memory_usage :color "memory-color")
      (circular_stat :icon "󰋊" :value storage_percent :color "storage-color")
      (circular_stat :icon "󰔏" :value cpu_temp :color "temp-color" :unit "°C"))))

;; Tokyo Weather Widget
(defwidget tokyo_weather []
  (box :class "widget weather-card" :orientation "h" :space-evenly false :spacing 16 :valign "center"
    (label :class "weather-icon" :text tokyo_icon)
    (box :orientation "v" :space-evenly false :spacing 4
      (label :class "weather-temp" :text "${tokyo_temp}°" :xalign 0)
      (label :class "weather-condition" :text tokyo_condition :xalign 0))))

;; Media Player Widget
(defwidget media_player []
  (box :class "widget media-card"
       :orientation "h"
       :space-evenly false
       :spacing 20
       :visible {music_status != "stopped"}
    (image :class "media-cover"
           :path music_cover
           :image-width 80
           :image-height 80)
    (box :orientation "v" :space-evenly false :spacing 6 :valign "center"
      (box :orientation "h" :space-evenly false :spacing 8
        (label :class "media-status-icon"
               :text {music_status == "playing" ? "󰐊" : "󰏤"})
        (label :class "media-title"
               :text {music_title}
               :xalign 0
               :limit-width 28
               :wrap false))
      (label :class "media-artist"
             :text {music_artist}
             :xalign 0
             :limit-width 30
             :wrap false))))

;; Main Dashboard
(defwidget dashboard []
  (box :class "dashboard" :orientation "h" :space-evenly false :spacing 12
    (box :orientation "v" :space-evenly false :spacing 12 :style "min-width: 320px;"
      (tokyo_weather)
      (media_player)
      (system_stats))))

;; ============ BAR WIDGETS ============

;; Clock Widget
(defwidget bar_clock []
  (box :class "bar-module bar-clock"
    (label :text bar_time)))

;; Workspaces Widget
(defwidget bar_workspaces []
  (box :class "bar-workspaces" :spacing 8 :valign "center" :space-evenly false
    (for workspace in "[1,2,3,4,5,6,7,8,9]"
      (button :class "workspace-btn ${workspace == active_workspace || '${workspace}' == active_workspace ? 'active' : ''}"
              :onclick "hyprctl dispatch workspace ${workspace}"
        (box :class "workspace-dot ${workspace == active_workspace || '${workspace}' == active_workspace ? 'active-dot' : ''}")))))

;; Language Widget
(defwidget bar_language []
  (box :class "bar-module bar-language"
    (label :text language_status)))

;; Audio Widget
(defwidget bar_audio []
  (box :class "bar-module bar-audio"
       :tooltip "${audio_volume}%"
    (label :text audio_icon)))

;; Network Widget
(defwidget bar_network []
  (box :class "bar-module bar-network ${network_type == 'disconnected' ? 'disconnected' : ''}"
       :tooltip network_type
    (label :text network_icon)))

;; Battery Widget
(defwidget bar_battery []
  (box :class "bar-module bar-battery ${battery_status == 'Charging' ? 'charging' : battery_percent < 15 ? 'critical' : ''}"
       :tooltip "${battery_percent}% - ${battery_status}"
    (label :text battery_icon)))

;; Power Button Widget
(defwidget bar_power []
  (box :class "bar-module bar-power"
    (button :onclick "wlogout"
      (label :text "⏻"))))

;; Main Bar
(defwidget bar []
  (centerbox :class "bar" :orientation "h"
    (box :class "bar-left" :halign "start" :spacing 4 :space-evenly false
      (bar_clock))
    (box :class "bar-center" :halign "center" :spacing 4 :space-evenly false
      (bar_workspaces))
    (box :class "bar-right" :halign "end" :spacing 4 :space-evenly false
      (bar_audio)
      (bar_network)
      (bar_battery)
      (bar_power))))

;; Date Widget
(defwidget date_display []
  (box :class "date-widget" :orientation "v" :space-evenly false :spacing 4
    (label :class "date-weekday" :text date_weekday)
    (box :class "date-main" :orientation "h" :space-evenly false :spacing 8 :halign "center"
      (label :class "date-month" :text date_month)
      (label :class "date-day" :text date_day))
    (label :class "date-year" :text date_year)
    (label :class "date-time" :text date_time)))

;; Main Window
(defwindow dashboard_window
  :monitor 0
  :geometry (geometry :x "20px"
                      :y "20px"
                      :width "660px"
                      :anchor "top left")
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  (dashboard))

;; Date Window
(defwindow date_window
  :monitor 0
  :geometry (geometry :x "20px"
                      :y "20px"
                      :anchor "bottom right")
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  (date_display))

;; Bar Window
(defwindow bar_window
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "40px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :windowtype "dock"
  :wm-ignore false
  (bar))
