;; Tokyo Weather
(defpoll tokyo_temp :interval "30m" "scripts/weather.sh temp tokyo")
(defpoll tokyo_condition :interval "30m" "scripts/weather.sh condition tokyo")
(defpoll tokyo_icon :interval "30m" "scripts/weather.sh icon tokyo")
(defpoll tokyo_humidity :interval "30m" "scripts/weather.sh humidity tokyo")

;; Media Player
(defpoll music_status :interval "1s" "scripts/music.sh status")
(defpoll music_title :interval "1s" "scripts/music.sh title")
(defpoll music_artist :interval "1s" "scripts/music.sh artist")
(defpoll music_cover :interval "1s" "scripts/music.sh cover")

;; System stats
(defpoll cpu_usage :interval "2s" "scripts/system.sh cpu")
(defpoll cpu_percent :interval "2s" "scripts/system.sh cpu_percent")
(defpoll memory_usage :interval "2s" "scripts/system.sh memory")
(defpoll cpu_temp :interval "3s" "scripts/system.sh temp")

;; Storage
(defpoll storage_percent :interval "30s" "scripts/storage.sh percent")

;; Audio & Brightness & Battery
(defpoll audio_volume :interval "1s" "scripts/audio.sh volume")
(defpoll audio_icon :interval "1s" "scripts/audio.sh icon")
(defpoll brightness_percent :interval "1s" "scripts/brightness.sh percent")
(defpoll brightness_icon :interval "1s" "scripts/brightness.sh icon")
(defpoll battery_percent :interval "5s" "scripts/battery.sh percent")
(defpoll battery_icon :interval "5s" "scripts/battery.sh icon")
(defpoll battery_status :interval "5s" "scripts/battery.sh status")

;; Date
(defpoll date_day :interval "10s" "date '+%d'")
(defpoll date_month :interval "10s" "date '+%b' | tr '[:lower:]' '[:upper:]'")
(defpoll date_year :interval "10s" "date '+%Y'")
(defpoll date_weekday :interval "10s" "date '+%A' | tr '[:lower:]' '[:upper:]'")
(defpoll date_time :interval "1s" "date '+%I:%M %p'")

;; Calendar
(defpoll calendar_year :interval "1h" "scripts/calendar.sh year")
(defpoll calendar_month :interval "1h" "scripts/calendar.sh month")
(defpoll calendar_week0 :interval "1h" "scripts/calendar.sh week0")
(defpoll calendar_week1 :interval "1h" "scripts/calendar.sh week1")
(defpoll calendar_week2 :interval "1h" "scripts/calendar.sh week2")
(defpoll calendar_week3 :interval "1h" "scripts/calendar.sh week3")
(defpoll calendar_week4 :interval "1h" "scripts/calendar.sh week4")
(defpoll calendar_week5 :interval "1h" "scripts/calendar.sh week5")

;; Circular Stat Item (based on storage widget pattern)
(defwidget circular_stat [icon value ?color ?unit]
  (box :class "stat-item" :orientation "v" :space-evenly false :spacing 6
    (box :class "stat-ring" :orientation "v" :valign "center" :halign "center"
      (overlay
        (circular-progress :value 100
                          :class "stat-progress-bg"
                          :thickness 9
                          :start-at 75
                          :clockwise true)
        (circular-progress :value value
                          :class "stat-progress ${color}"
                          :thickness 9
                          :start-at 75
                          :clockwise true)
        (box :class "stat-center" :orientation "v" :valign "center" :halign "center"
          (label :class "stat-icon" :text icon))))
    (label :class "stat-percent" :text "${round(value, 0)}${unit ?: '%'}")))

;; System Stats Widget with Circular Graphs
(defwidget system_stats []
  (box :class "widget system-stats-card" :orientation "v" :space-evenly false :spacing 10
    (box :class "stats-grid" :orientation "h" :space-evenly false :spacing 18 :halign "start"
      (circular_stat :icon "󰻠" :value cpu_percent :color "cpu-color")
      (circular_stat :icon "󰍛" :value memory_usage :color "memory-color")
      (circular_stat :icon "󰋊" :value storage_percent :color "storage-color")
      (circular_stat :icon "󰔏" :value cpu_temp :color "temp-color" :unit "°C"))))

;; Controls Widget (Audio, Brightness & Battery)
(defwidget controls []
  (box :class "widget controls-card" :orientation "v" :space-evenly false :spacing 24
    ;; Audio
    (box :class "control-item" :orientation "h" :space-evenly false :spacing 12
      (label :class "control-icon audio-icon" :text audio_icon)
      (box :class "control-bar-container" :orientation "v" :valign "center"
        (progress :class "control-bar"
                  :value audio_volume))
      (label :class "control-value" :text "${audio_volume}%"))

    ;; Brightness
    (box :class "control-item" :orientation "h" :space-evenly false :spacing 12
      (label :class "control-icon" :text brightness_icon)
      (box :class "control-bar-container" :orientation "v" :valign "center"
        (progress :class "control-bar"
                  :value brightness_percent))
      (label :class "control-value" :text "${brightness_percent}%"))

    ;; Battery
    (box :class "control-item" :orientation "h" :space-evenly false :spacing 12
      (label :class "control-icon" :text battery_icon)
      (box :class "control-bar-container" :orientation "v" :valign "center"
        (progress :class "control-bar"
                  :value battery_percent))
      (label :class "control-value" :text "${battery_percent}%"))))

;; Quick Launcher Widget
(defwidget quick_launcher []
  (box :class "widget launcher-card" :orientation "v" :space-evenly false :spacing 8
    (box :class "launcher-grid" :orientation "h" :halign "start" :space-evenly false :spacing 12
      (button :class "launcher-btn" :onclick "blender &"
        (label :class "launcher-icon" :text "󰂫"))
      (button :class "launcher-btn" :onclick "google-chrome-stable &"
        (label :class "launcher-icon" :text "󰊯"))
      (button :class "launcher-btn" :onclick "thunar &"
        (label :class "launcher-icon" :text "󰉋")))))

;; Tokyo Weather Widget
(defwidget tokyo_weather []
  (box :class "widget weather-card" :orientation "h" :space-evenly false :spacing 16 :valign "center"
    (label :class "weather-icon" :text tokyo_icon)
    (box :orientation "v" :space-evenly false :spacing 4
      (label :class "weather-location" :text "Tokyo" :xalign 0)
      (label :class "weather-temp" :text "${tokyo_temp}°" :xalign 0)
      (label :class "weather-condition" :text tokyo_condition :xalign 0))))

;; Media Player Widget
(defwidget media_player []
  (box :class "widget media-card"
       :orientation "h"
       :space-evenly false
       :spacing 20
       :visible {music_status != "stopped"}
    (image :class "media-cover"
           :path music_cover
           :image-width 80
           :image-height 80)
    (box :orientation "v" :space-evenly false :spacing 6 :valign "center"
      (box :orientation "h" :space-evenly false :spacing 8
        (label :class "media-status-icon"
               :text {music_status == "playing" ? "󰐊" : "󰏤"})
        (label :class "media-title"
               :text {music_title}
               :xalign 0
               :limit-width 28
               :wrap false))
      (label :class "media-artist"
             :text {music_artist}
             :xalign 0
             :limit-width 30
             :wrap false))))

;; Main Dashboard
(defwidget dashboard []
  (box :class "dashboard" :orientation "h" :space-evenly false :spacing 12
    (box :orientation "v" :space-evenly false :spacing 18 :style "min-width: 320px;"
      (tokyo_weather)
      (media_player)
      (system_stats)
      (controls))))

;; Date Widget with Calendar
(defwidget date_display []
  (box :orientation "v" :space-evenly false :spacing 8
    (box :class "date-widget" :orientation "v" :space-evenly false :spacing 0
      (label :class "date-weekday" :text date_weekday :xalign 0.5)
      (box :class "date-main" :orientation "h" :space-evenly false :spacing 8 :halign "center"
        (label :class "date-month" :text date_month)
        (label :class "date-day" :text date_day))
      (label :class "date-year" :text date_year :xalign 0.5))
    (month_calendar)))

;; Calendar day helper widget
(defwidget calendar_day [day current]
  (label :class "calendar-day ${current == 'true' ? 'current-day' : ''} ${day == '' ? 'empty-day' : ''}"
         :text day))

;; Calendar week row helper widget
(defwidget calendar_week_row [week_data]
  (box :class "calendar-week" :orientation "h" :space-evenly true
    (for day in week_data
      (calendar_day :day {day.day} :current {day.current}))))

;; Calendar Widget
(defwidget month_calendar []
  (box :class "calendar-widget" :orientation "v" :space-evenly false :spacing 12
    ;; Day Names Header
    (box :class "calendar-days-header" :orientation "h" :space-evenly true
      (label :class "calendar-day-name" :text "S")
      (label :class "calendar-day-name" :text "M")
      (label :class "calendar-day-name" :text "T")
      (label :class "calendar-day-name" :text "W")
      (label :class "calendar-day-name" :text "T")
      (label :class "calendar-day-name" :text "F")
      (label :class "calendar-day-name" :text "S"))

    ;; Calendar Grid
    (box :class "calendar-grid" :orientation "v" :space-evenly false
      (calendar_week_row :week_data calendar_week0)
      (calendar_week_row :week_data calendar_week1)
      (calendar_week_row :week_data calendar_week2)
      (calendar_week_row :week_data calendar_week3)
      (calendar_week_row :week_data calendar_week4)
      (calendar_week_row :week_data calendar_week5))))

;; Main Window
(defwindow dashboard_window
  :monitor 0
  :geometry (geometry :x "20px"
                      :y "20px"
                      :width "660px"
                      :anchor "top left")
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  (dashboard))

;; Date Window
(defwindow date_window
  :monitor 0
  :geometry (geometry :x "20px"
                      :y "20px"
                      :anchor "bottom right")
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  (date_display))
